import { User } from "../models/User.model.js";
import ApiError from "../utils/ApiError.js";
import asyncHandler from "../utils/asyncHandler.js";
import uploadOnCloudinary from "../utils/cloudinary.js";
import ApiResponse from "../utils/ApiResponse.js";
import jwt from "jsonwebtoken";

const generateAccessAndRefreshToken = async (userId) => {
    try {
        const user = await User.findById(userId);
        const access_token = user.generateAccessToken();
        const refresh_token = user.generateRefreshToken();
        user.refreshToken = refresh_token;
        await user.save({ validateBeforeSave: true }); // we are passing this (validateBeforeSave: true) to avoid validations example:- validation for username, password or email to save in database.
        return {
            access_token,
            refresh_token
        };
    } catch (error) {
        throw new ApiError(500, "something went wrong while generating access and refresh token");
    }
};

const registerUser = asyncHandler(async (req, res) => {
    const { fullName, email, username, password } = req.body;
    if ([fullName, email, username, password].some((field) => field.trim() === "")) {
        throw new ApiError(400, "All fields are required");
    }
    const existedUser = await User.findOne({
        $or: [{ username }, { email }]
    }); // method in mongoose to find the user using email or username.

    if (existedUser) {
        throw new ApiError(409, "Username or email already exists");
    }

    const avatarLocalPath = req.files?.avatar[0]?.path; //req.files access is given by multer. Multer conatins data in files not in body as json.
    // const coverImageLocalPath = req.files?.coverImage[0]?.path;
    let coverImageLocalPath;
    if (req.files && Array.isArray(req.files.coverImage) && req.files.coverImage.length > 0) {
        coverImageLocalPath = req.files.coverImage[0].path;
    }

    if (!avatarLocalPath) {
        throw new ApiError(400, "Avatar file is required");
    }

    const avatar = await uploadOnCloudinary(avatarLocalPath);
    let coverImage = "";
    if (coverImageLocalPath) {
        coverImage = await uploadOnCloudinary(coverImageLocalPath);
    }
    if (!avatar) {
        throw new ApiError(400, "Avatar file is required");
    }

    const user = await User.create({
        fullName,
        email,
        username: username.toLowerCase(),
        password,
        avatar: avatar?.url,
        coverImage: coverImage?.url || ""
    }); // create method makes an object and store it in db with a special id(named _id).

    const createdUser = await User.findById(user._id) //finds the user by id generated by mongodb.
        .select("-password -refreshToken"); // removes password and refreshToken from object.
    if (!createdUser) {
        throw new ApiError(500, "Something went wrong while registering the user!");
    }

    return res.status(201).json(
        new ApiResponse(201, createdUser, "User registered successfully")
    );
});

const loginUser = asyncHandler(async (req, res) => {
    const { username, email, password } = req.body;

    if (!(username || email)) {
        throw new ApiError(400, "Username or Password is required");
    }

    const user = await User.findOne({
        $or: [{ username: username?.toLowerCase() }, { email: email?.toLowerCase() }]
    });

    if (!user) {
        throw new ApiError(404, "User not found");
    }

    const isPasswordValid = await user.isPasswordCorrect(password);

    if (!isPasswordValid) {
        throw new ApiError(401, "Invalid username or password");
    }
    const { access_token, refresh_token } = await generateAccessAndRefreshToken(user._id);

    // const loggedInUser = await user.findById(user._id).select("-password -refreshToken");

    const loggedInUser = { ...user };
    delete loggedInUser.password;
    delete loggedInUser.refreshToken;

    const options = {
        httpOnly: true,  // cookies can be modifiable from server only not from frontend side.
        secure: true
    };

    return res.status(200)
        .cookie("accessToken", access_token, options)
        .cookie("refreshToken", refresh_token, options)
        .json(
            new ApiResponse(200, {
                user: loggedInUser,
                accessToken: access_token,
                refreshToken: refresh_token
            }, "User logged in successfully")
        );
});

const logoutUser = asyncHandler(async (req, res) => {
    await User.findByIdAndUpdate(req.user._id,
        {
            $set: {      // $set is a mongodb operator that sets a value to the field.
                refreshToken: undefined,
            }
        },
        {
            new: true,   // new makes sure that the return response we get is a new value. 
        }
    );
    const options = {
        httpOnly: true,  // cookies can be modifiable from server only not from frontend side.
        secure: true
    };

    return res.status(200)
        .clearCookie("accessToken", options)
        .clearCookie("refreshToken", options)
        .json(new ApiResponse(200, {}, "User logged out successfully"));
});

const refreshAccessToken = asyncHandler(async (req, res) => {
    const refreshToken = req.cookies?.refreshToken || req.body?.refreshToken;

    if (!refreshToken) {
        throw new ApiError(401, "Unauthorized request");
    }
    
    try {
        const decodedToken = jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET);
        const user = await User.findById(decodedToken?._id);

        if (!user) {
            throw new ApiError(403, "Invalid refresh token");
        }
        if (refreshToken !== user?.refreshToken) {
            throw new ApiError(403, "Refresh token is expired or used!");
        }

        const options = {
            httpOnly: true,
            secure: true
        };

        const { access_token, refresh_token } = await generateAccessAndRefreshToken(user._id);

        return res.status(200)
            .cookie("accessToken", access_token, options)
            .cookie("refreshToken", refresh_token, options)
            .json(new ApiResponse(200, { accessToken: access_token, refreshToken: refresh_token }, "Access token refreshed successfully!"));
    } catch (error) {
        throw new ApiError(401, error?.message || "Invalid refresh token");
    }
});

export { registerUser, loginUser, logoutUser, refreshAccessToken };